class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> result = new ArrayList<>();
        backtrack(result, num, target, "", 0, 0, 0);
        return result;
    }
    private void backtrack(List<String> result, String num, int target, String path, int pos, long eval, long multed) {
    if (pos == num.length()) {
        if (eval == target) {
            result.add(path);
        }
        return;
    }

    for (int i = pos; i < num.length(); i++) {
        if (i != pos && num.charAt(pos) == '0') break; // skip numbers with leading zero

        String part = num.substring(pos, i + 1);
        long curr = Long.parseLong(part);

        if (pos == 0) {
            backtrack(result, num, target, path + part, i + 1, curr, curr);
        } else {
            backtrack(result, num, target, path + "+" + part, i + 1, eval + curr, curr);
            backtrack(result, num, target, path + "-" + part, i + 1, eval - curr, -curr);
            backtrack(result, num, target, path + "*" + part, i + 1, eval - multed + multed * curr, multed * curr);
        }
    }
}
}
