//TC: o(n)
//SC: o(n)

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), candidates, target, 0);
        return result;
    }
    private void backtrack(List<List<Integer>> result, List<Integer> combination, int[] candidates, int remaining, int start) {
    if (remaining == 0) {
        result.add(new ArrayList<>(combination));
        return;
    }
    if (remaining < 0) return;

    for (int i = start; i < candidates.length; i++) {
        combination.add(candidates[i]);
        backtrack(result, combination, candidates, remaining - candidates[i], i);
        combination.remove(combination.size() - 1);
    }
    }
}
